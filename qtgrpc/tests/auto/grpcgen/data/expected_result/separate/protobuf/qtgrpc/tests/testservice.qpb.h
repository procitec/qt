/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef TESTSERVICE_QPB_H
#define TESTSERVICE_QPB_H

#include "tst_qtgrpcgen_protobuf_only_exports.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

namespace qtgrpc::tests {
class SimpleStringMessage;
using SimpleStringMessageRepeated = QList<SimpleStringMessage>;
namespace SimpleStringMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringMessage_QtProtobufNested

class SimpleIntMessage;
using SimpleIntMessageRepeated = QList<SimpleIntMessage>;
namespace SimpleIntMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleIntMessage_QtProtobufNested

class BlobMessage;
using BlobMessageRepeated = QList<BlobMessage>;
namespace BlobMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace BlobMessage_QtProtobufNested


class SimpleStringMessage_QtProtobufData;
class SimpleStringMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)
    Q_PROPERTY(QString testFieldString READ testFieldString WRITE setTestFieldString SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringMessage_QtProtobufNested::QtProtobufFieldEnum;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleStringMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT ~SimpleStringMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleStringMessage(const SimpleStringMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleStringMessage &operator =(const SimpleStringMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleStringMessage(SimpleStringMessage &&other) noexcept;
    SimpleStringMessage &operator =(SimpleStringMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT const QString &testFieldString() const &;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT void setTestFieldString(const QString &testFieldString);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT void setTestFieldString(QString &&testFieldString);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT bool comparesEqual(const SimpleStringMessage &lhs, const SimpleStringMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringMessage &lhs, const SimpleStringMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringMessage &lhs, const SimpleStringMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringMessage_QtProtobufData> dptr;
};
namespace SimpleStringMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)

enum class QtProtobufFieldEnum {
    TestFieldStringProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringMessage_QtProtobufNested

class SimpleIntMessage_QtProtobufData;
class SimpleIntMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)
    Q_PROPERTY(QtProtobuf::sint32 testField READ testField WRITE setTestField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleIntMessage_QtProtobufNested::QtProtobufFieldEnum;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleIntMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT ~SimpleIntMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleIntMessage(const SimpleIntMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleIntMessage &operator =(const SimpleIntMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT SimpleIntMessage(SimpleIntMessage &&other) noexcept;
    SimpleIntMessage &operator =(SimpleIntMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleIntMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT QtProtobuf::sint32 testField() const;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT void setTestField(QtProtobuf::sint32 testField);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT bool comparesEqual(const SimpleIntMessage &lhs, const SimpleIntMessage &rhs) noexcept;
    friend bool operator==(const SimpleIntMessage &lhs, const SimpleIntMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleIntMessage &lhs, const SimpleIntMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleIntMessage_QtProtobufData> dptr;
};
namespace SimpleIntMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)

enum class QtProtobufFieldEnum {
    TestFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleIntMessage_QtProtobufNested

class BlobMessage_QtProtobufData;
class BlobMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)
    Q_PROPERTY(QByteArray testBytes READ testBytes WRITE setTestBytes SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = BlobMessage_QtProtobufNested::QtProtobufFieldEnum;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT BlobMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT ~BlobMessage();
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT BlobMessage(const BlobMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT BlobMessage &operator =(const BlobMessage &other);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT BlobMessage(BlobMessage &&other) noexcept;
    BlobMessage &operator =(BlobMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(BlobMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT const QByteArray &testBytes() const &;
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT void setTestBytes(const QByteArray &testBytes);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT void setTestBytes(QByteArray &&testBytes);
    QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT bool comparesEqual(const BlobMessage &lhs, const BlobMessage &rhs) noexcept;
    friend bool operator==(const BlobMessage &lhs, const BlobMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const BlobMessage &lhs, const BlobMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<BlobMessage_QtProtobufData> dptr;
};
namespace BlobMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTGRPCGEN_PROTOBUF_ONLY_EXPORT)

enum class QtProtobufFieldEnum {
    TestBytesProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace BlobMessage_QtProtobufNested
} // namespace qtgrpc::tests

#endif // TESTSERVICE_QPB_H
